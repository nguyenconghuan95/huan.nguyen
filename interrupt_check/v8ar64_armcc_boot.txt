; -----------------------------------------------------------------------------
;  The confidential and proprietary information contained in this file may
;  only be used by a person authorised under and to the extent permitted
;  by a subsisting licensing agreement from ARM Limited.
;
;             (C) COPYRIGHT 2014-2016 ARM Limited.
;                 ALL RIGHTS RESERVED
;
;  This entire notice must be reproduced on all copies of this file
;  and copies of this file may only be made by a person if such person is
;  permitted to do so under the terms of a subsisting license agreement
;  from ARM Limited.
;
;       SVN Information
;
;       Checked In          : $Date: $
;
;       Revision            : $Revision: $
;
;       Release Information : CORTEXA53-r0p4-00rel1
;
; -----------------------------------------------------------------------------
        AREA  boot, CODE, READONLY
        PRESERVE8
        GLOBAL  bootcode

        extern  vector_table
        extern  stack_top
        extern  CPU_STACK_SIZE
        extern  CLUSTER_STACK_SIZE
        extern  ttb0_base
        extern  mair_value
        extern  SelectCPU
;        extern  init_libc
        extern  main [weak]
;        extern  _exit

; -----------------------------------------------------------------------------
; Generic boot code
; -----------------------------------------------------------------------------
bootcode

; -----------------------------------------------------------------------------
; Initialise register bank
; -----------------------------------------------------------------------------

                mov     x0, xzr
                mov     x1, xzr
                mov     x2, xzr
                mov     x3, xzr
                mov     x4, xzr
                mov     x5, xzr
                mov     x6, xzr
                mov     x7, xzr
                mov     x8, xzr
                mov     x9, xzr
                mov     x10, xzr
                mov     x11, xzr
                mov     x12, xzr
                mov     x13, xzr
                mov     x14, xzr
                mov     x15, xzr
                mov     x16, xzr
                mov     x17, xzr
                mov     x18, xzr
                mov     x19, xzr
                mov     x20, xzr
                mov     x21, xzr
                mov     x22, xzr
                mov     x23, xzr
                mov     x24, xzr
                mov     x25, xzr
                mov     x26, xzr
                mov     x27, xzr
                mov     x28, xzr
                mov     x29, xzr
                mov     x30, xzr

; Zero the stack pointers, link registers and status registers

                mov     sp,       x0
                msr     sp_el0,   x0
                msr     sp_el1,   x0
                msr     sp_el2,   x0
                msr     elr_el1,  x0
                msr     elr_el2,  x0
                msr     elr_el3,  x0
                msr     spsr_el1, x0
                msr     spsr_el2, x0
                msr     spsr_el3, x0

; Initialise vector base address register for EL3
                adrl    x1, vector_table
                msr     vbar_el3, x1

; -----------------------------------------------------------------------------
; Variable definitions
; -----------------------------------------------------------------------------

; Values to set I and F bits in cpsr register
I_BIT           EQU 0x80
F_BIT           EQU 0x40
; Values for different modes in cpsr register
MODE_IRQ        EQU 0x12
MODE_ABT        EQU 0x17
MODE_UND        EQU 0x1b
MODE_SYS        EQU 0x1f


; -----------------------------------------------------------------------------
; Initialise stack pointers
; -----------------------------------------------------------------------------

;               Use CPU No to calculate stack pointer
                adrl    x1, stack_top
                mov     x1, #0x80120000   ; add arai
                mrs     x2, mpidr_el1
                and     x2, x2, #0xFF     ; x2 == CPU number
                mov     x3, #0x0580
                mul     x3, x2, x3

                mrs     x2, mpidr_el1
                and     x2, x2, #0xFF00
                asr     x2, x2, #8        ; x2 == Cluster number
                mov     x4, #0x0580
                mul     x2, x4, x2                ; 4stack_size x clusternum
                add     x3, x3, x2                ; add 4 X cluster num x stack size

                sub     x1, x1, x3
                mov     sp, x1

; -----------------------------------------------------------------------------
; NEON
; -----------------------------------------------------------------------------

; NEON ifdef defined in makefile

; Enable NEON and initialize the register bank if NEON
; is present.
                mrs     x0, ID_AA64PFR0_EL1
                ubfx    x0, x0, #16, #4  ; Extract the floating-point field (x0 == 0x0 if present)
                cbnz    x0, neon_end     ; Skip FP initialization if not present

                mov     x1, #(0x3 << 20)
                msr     cpacr_el1, x1
                mov     x1, #(0x3 << 20)
                msr     cpacr_el1, x1
                isb
                MRS x0,CPTR_EL2
                LDR x1,=0x400
                BIC x0,x0,x1
                MSR CPTR_EL2,x0
                ISB
                MRS x0,CPTR_EL3
                LDR x1,=0x400
                BIC x0,x0,x1
                MSR CPTR_EL3,x0
                ISB

                fmov    d0,  xzr
                fmov    d1,  xzr
                fmov    d2,  xzr
                fmov    d3,  xzr
                fmov    d4,  xzr
                fmov    d5,  xzr
                fmov    d6,  xzr
                fmov    d7,  xzr
                fmov    d8,  xzr
                fmov    d9,  xzr
                fmov    d10, xzr
                fmov    d11, xzr
                fmov    d12, xzr
                fmov    d13, xzr
                fmov    d14, xzr
                fmov    d15, xzr
                fmov    d16, xzr
                fmov    d17, xzr
                fmov    d18, xzr
                fmov    d19, xzr
                fmov    d20, xzr
                fmov    d21, xzr
                fmov    d22, xzr
                fmov    d23, xzr
                fmov    d24, xzr
                fmov    d25, xzr
                fmov    d26, xzr
                fmov    d27, xzr
                fmov    d28, xzr
                fmov    d29, xzr
                fmov    d30, xzr
                fmov    d31, xzr
neon_end

; -----------------------------------------------------------------------------
; Setup MMU and TLBS
; -----------------------------------------------------------------------------

; MMU ifdef defined in makefile
;;arai;; ttb_setup
;;arai;;
;;arai;;                ;  Create page tables
;;arai;;                adr     x0, ttb0_base
;;arai;;                msr     ttbr0_el3, x0
;;arai;;
;;arai;;                ldr     w1, =0x80803520
;;arai;;                msr     TCR_EL3, x1
;;arai;;                ldr     x1, mair_value
;;arai;;                msr     MAIR_EL3, x1
;;arai;;
;;arai;;;               Enable caches and MMU
;;arai;;                mrs     x0, sctlr_el3
;;arai;;                orr     x0, x0, #(0x1 << 2)   ; C bit (data cache)
;;arai;;                orr     x0, x0, #(0x1 << 12)  ; I bit (instruction cache)
;;arai;;                orr     x0, x0, #0x1          ; M bit (MMU)
;;arai;;                msr     sctlr_el3, x0
                mrs     x0, sctlr_el3
;                orr     x0, x0, #(0x1 << 2)   ; C bit (data cache)
                orr     x0, x0, #(0x1 << 12)  ; I bit (instruction cache)
;                orr     x0, x0, #0x1          ; M bit (MMU)
                msr     sctlr_el3, x0


; Ensure all writes to system registers have taken place
                dsb sy
                isb sy

;               Enable interrupts
                msr     DAIFClr, #0xF
;               Configure FIQ to be taken at EL3 by setting SCR.FIQ.
;               This allows a FIQ to wake CPUs that wait in WFI in EL3
;               at the end of the boot code.
                mrs     x0, scr_el3
                orr     x0, x0, #(1<<2); FIQ bit
                orr     x0, x0, #(1<<1); IRQ bit
                msr     scr_el3, x0

; -----------------------------------------------------------------------------
; Start the test
; -----------------------------------------------------------------------------

; set SOC_CPUS Variable transe
                ldr     x8 , =0x80105f88 ; Base address set
                ;SOC_CPUS[0]
                ldr     w7 , =0x0010000f
                str     w7 , [x8,#0x00]  ; ADD 0x80105f88
                ldr     w7 , =0x00000005
                str     w7 , [x8,#0x04]  ; ADD 0x80105f8c
                ldr     w7 , =0x7fffffff
                str     w7 , [x8,#0x08]  ; ADD 0x80105f90
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x0C]  ; ADD 0x80105f94
                ldr     w7 , =0x0c000000
                str     w7 , [x8,#0x10]  ; ADD 0x80105f98
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x14]  ; ADD 0x80105f9c
                ldr     w7 , =0x00130011
                str     w7 , [x8,#0x18]  ; ADD 0x80105fa0
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x1C]  ; ADD 0x80105fa4 
                ldr     w7 , =0x410fd034
                str     w7 , [x8,#0x20]  ; ADD 0x80105fa8
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x24]  ; ADD 0x80105fac
                ldr     w7 , =0x80000000
                str     w7 , [x8,#0x28]  ; ADD 0x80105fb0
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x2C]  ; ADD 0x80105fb4
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x30]  ; ADD 0x80105fb8
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x34]  ; ADD 0x80105fbc
                ;SOC_CPUS[0]
                ldr     w7 , =0x0014000f
                str     w7 , [x8,#0x38]  ; ADD 0x80105fc0
                ldr     w7 , =0x00000005
                str     w7 , [x8,#0x3C]  ; ADD 0x80105fc4
                ldr     w7 , =0x7fffffff
                str     w7 , [x8,#0x40]  ; ADD 0x80105fc8
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x44]  ; ADD 0x80105fcc
                ldr     w7 , =0x0c000000
                str     w7 , [x8,#0x48]  ; ADD 0x80105fd0
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x4C]  ; ADD 0x80105fd4
                ldr     w7 , =0x00170015
                str     w7 , [x8,#0x50]  ; ADD 0x80105fd8
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x54]  ; ADD 0x80105fdc
                ldr     w7 , =0x410fd034
                str     w7 , [x8,#0x58]  ; ADD 0x80105fe0
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x5C]  ; ADD 0x80105fe4
                ldr     w7 , =0x80000001
                str     w7 , [x8,#0x60]  ; ADD 0x80105fe8
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x64]  ; ADD 0x80105fsc
                ldr     w7 , =0x00010000
                str     w7 , [x8,#0x68]  ; ADD 0x80105ff0
                ldr     w7 , =0x00000000
                str     w7 , [x8,#0x6C]  ; ADD 0x80105ff4
                ;NUM_SOC_CPUS
                ldr     w7 , =0x00000002
                str     w7 , [x8,#0x70]  ; ADD 0x80105ff8

cpu_start

; SelectCPU is run first so that only the selected CPU will run initialisation.
; The cpu selection could instead be done here to fit the requirements of specific systems
; For gcc we need to call init_libc to handle initialisation of c librarys etc before starting main
; Once main has returned _exit will finish the simulation using the function specified in gcc_retarget.c
                bl SelectCPU
;                bl init_libc
                bl main
;                b _exit

         end
